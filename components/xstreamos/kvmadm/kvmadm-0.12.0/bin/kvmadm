#!/usr/bin/env perl

use lib qw(); # PERL5LIB
use FindBin;
# PERL5LIB
use lib "$FindBin::RealBin/../lib"; use lib "$FindBin::RealBin/../thirdparty/lib/perl5"; # LIBDIR
use strict;
use warnings;

use Pod::Usage;
use File::Temp qw(tempfile);
use JSON;
use Getopt::Long qw(:config posix_default no_ignore_case);
use KVMadm::Config;
use KVMadm::Monitor;
use Illumos::SMF;
use Illumos::Zones;

my $FMRI        = KVMadm::Config->fmri();
my $RUN_PATH    = KVMadm::Config->runPath();
my %delPurgeMap = map { $_ => 1 } qw(vnic zvol zone);
my $kvmConfig;

#fix perldoc pager if not set
$ENV{PERLDOC_PAGER} ||= '/usr/bin/less -rins' if -x '/usr/bin/less';

sub gen_uuid_v4 {
    my $uuid = '';
    for (1 .. 4) {
        $uuid .= pack 'I', (int(rand(65536)) % 65536 << 16) | int(rand(65536)) % 65536;
    }
    #set variant to 2
    substr $uuid, 8, 1, chr(ord(substr $uuid, 8, 1) & 0x3f | 0x02 << 6);
    #set version to 4
    substr $uuid, 6, 1, chr(ord(substr $uuid, 6, 1) & 0x0f | 0x04 << 4);
    return join '-', map { unpack 'H*', $_ } map { substr $uuid, 0, $_, '' } qw(4 2 2 2 6);
}

sub editConfig {
    my $configJSON = shift;

    my ($fh, $filename) = tempfile();
    print $fh "$configJSON\n";
    close $fh;

    my $modified = (stat $filename)[9];

    my $editor = $ENV{VISUAL} || $ENV{EDITOR} || '/usr/bin/vi';
    system($editor, $filename) and die "ERROR: executing editor\n";

    open $fh, '<', $filename or die "ERROR: cannot open temp file $filename: $!\n";
    $configJSON = do { local $/; <$fh>; };
    close $fh;

    $modified = (stat $filename)[9] != $modified;
    unlink $filename;

    return ($modified, $configJSON);
}

sub writeConfig {
    my $kvmName = shift;
    my $config = shift;
    my $configJSON = JSON->new->pretty->encode($config);

    my $configValid = 0;

    while (!$configValid){
        local $@;
        eval {
            local $SIG{__DIE__};

            (my $modified, $configJSON) = editConfig($configJSON);
            $config = JSON->new->decode($configJSON);

            return if !$modified;

            $kvmConfig->writeConfig($kvmName, $config);
        };
        if ($@){
            print $@;
            print "Do you want to retry [Y/n]? ";
            chomp(my $check = <STDIN>);

            $configValid = $check =~ /^no?$/i
        }
        else{
            $configValid = 1;
        }
    }
}

sub main {
    my $mainOpt = shift;

    # check if we are in global zone
    Illumos::Zones->isGZ or die "ERROR: kvmadm can only be run from global zone\n";

    defined $mainOpt or pod2usage(1);

    $kvmConfig = KVMadm::Config->new();
    my $smf    = Illumos::SMF->new(zonesupport => 1);

    for ($mainOpt){
        /^create$/ && do {
            my $kvmName = shift @ARGV;
            my $config = $kvmConfig->getTemplate;
            #generate a random uuid
            $config->{uuid} = gen_uuid_v4();

            defined $kvmName or pod2usage(1);
            $smf->fmriExists($FMRI . ':' . $kvmName)
                && die "ERROR: instance '$kvmName' already exists. use 'edit' to change properties\n";

            writeConfig($kvmName, $config);
            
            last; 
        };
        /^import$/ && do {
            my $fileName = shift @ARGV;

            open my $fh, '<', $fileName or die 'ERROR: open file ' . $fileName . ":$!\n";
            my $configJSON = do { local $/; <$fh>; };
            close $fh;

            my $config = JSON->new->decode($configJSON);
            for my $kvm (keys %$config){
                $smf->fmriExists($FMRI . ':' . $kvm)
                    && die "ERROR: instance '$kvm' already exists. use 'edit' to change properties\n";
                writeConfig($kvm, $config->{$kvm});
            }

            last;
        };
        /^edit$/ && do {
            my $kvmName = shift @ARGV;
            defined $kvmName or pod2usage(1);

            my $config = $kvmConfig->readConfig($kvmName);
            writeConfig($kvmName, $config);

            last;
        };
        /^delete$/ && do {
            my $kvmName = pop @ARGV;
            defined $kvmName or pod2usage(1);
            my $opts = {};
            GetOptions($opts, qw(purge=s)) or exit 1;
            #split all features into individual options
            if ($opts->{purge}){
                for my $purge (split /,/, $opts->{purge}){
                    $delPurgeMap{$purge} or die "ERROR: purge '$purge' not supported\n";
                    $opts->{$purge} = 1;
                }
                delete $opts->{purge};
            }

            $kvmConfig->removeKVM($kvmName, $opts);
            last;
        };
        /^list$/ && do {
            my $kvmName = shift @ARGV;

            print JSON->new->pretty->encode($kvmConfig->listKVM($kvmName));
            last;
        };
        /^state$/ && do {
            my $kvmName = shift @ARGV;

            my $config = $kvmConfig->listKVM($kvmName);
            my $zone = Illumos::Zones->new();

            for my $kvmName (keys %$config) {
                my $smfState = '';

                if ($config->{$kvmName}->{zone}) {
                    $smfState = $zone->zoneState($kvmName) eq 'running'
                        ? $smf->fmriState("$FMRI:$kvmName", { zonename => $kvmName })
                        : 'offline';
                }
                else {
                    $smfState = $smf->fmriState("$FMRI:$kvmName");
                }
                # check if we are in the pre start command
                $smfState eq 'online' && $config->{$kvmName}->{pre_start_cmd} && do {
                    my $pid = $kvmConfig->getPid($kvmName);
                    $smfState = 'offline*' if !$pid || !kill (0, $pid);
                };
                print $smfState . (' ' x (15 - length($smfState))) . $kvmName . "\n";
            }
            last;
        };
        /^start$/ && do {
            my $kvmName = shift @ARGV;
            defined $kvmName or pod2usage(1);

            my $config = $kvmConfig->readConfig($kvmName);

            if ($config->{zone}) {
                my $zone = Illumos::Zones->new();
                $zone->boot($kvmName);
                last;
            }
            else {
                $smf->enable("$FMRI:$kvmName");
            }
            last;

        };
        /^stop$/ && do {
            my $kvmName = shift @ARGV;
            defined $kvmName or pod2usage(1);

            my $config = $kvmConfig->readConfig($kvmName);

            if ($config->{zone}) {
                my $zone = Illumos::Zones->new();
                $zone->shutdown($kvmName);
                last;
            }
            else {
                $smf->disable("$FMRI:$kvmName");
            }
            last;
        };
        /^restart$/ && do {
            my $kvmName = shift @ARGV;
            defined $kvmName or pod2usage(1);

            my $config = $kvmConfig->readConfig($kvmName);

            if ($config->{zone}) {
                my $zone = Illumos::Zones->new();
                $zone->reboot($kvmName);
                last;
            }
            else {
                $smf->restart("$FMRI:$kvmName");
            }
            last;
        };
        /^show-cmd$/ && do {
            my $kvmName = shift @ARGV;
            defined $kvmName or pod2usage(1);

            for (@{$kvmConfig->getKVMCmdArray($kvmName)}){
                print /^-/ ? "\n$_" : " $_";
            }
            print "\n";

            last;
        };
        /^info$/ && do {
            my $kvmName = pop @ARGV;
            my $types   = shift @ARGV;
            defined $kvmName or pod2usage(1);

            my $config = $kvmConfig->readConfig($kvmName);
            my $mon = KVMadm::Monitor->new();

            $smf->fmriOnline("$FMRI:$kvmName", { zonename => $config->{zone} ? $kvmName : undef,
                zonepath => $config->{zone}->{zonepath} }) or die "ERROR: KVM instance '$kvmName' not online\n";

            my $monInfo = $mon->monInfo;
            my @types = !$types || $types eq 'all' ? @$monInfo : split /,/, $types;
            for my $type (@types){
                grep { $_ eq $type } @$monInfo
                    or die "ERROR: don't know type '$type'\n";
                
                print "QEMU INFO $type:\n";
                print join("\n", @{$mon->queryMonitor("$RUN_PATH/$kvmName/$kvmName.monitor", "info $type\n")});
                print "\n";
            }

            last;
        };
        /^monitor$/ && do {
            my $kvmName = shift @ARGV;
            defined $kvmName or pod2usage(1);

            my $config = $kvmConfig->readConfig($kvmName);
            my $mon = KVMadm::Monitor->new();

            $smf->fmriOnline("$FMRI:$kvmName", { zonename => $config->{zone} ? $kvmName : undef,
                zonepath => $config->{zone}->{zonepath} }) or die "ERROR: KVM instance '$kvmName' not online\n";

            # qemu monitor command provided
            @ARGV && do {
                my $cmd = join ' ', @ARGV;
                print join "\n", @{$mon->queryMonitor("$RUN_PATH/$kvmName/$kvmName.monitor", "$cmd\n")};
                print "\n";

                last;
            };
            # no qemu monitor command provided; enter monitor
            $mon->sockConn("$RUN_PATH/$kvmName/$kvmName.monitor");

            last;
        };
        /^vnc$/ && do {
            my $kvmName = pop @ARGV;
            my $vncPort = shift @ARGV;
            defined $kvmName && defined $vncPort or pod2usage(1);

            my $config = $kvmConfig->readConfig($kvmName);
            my $mon = KVMadm::Monitor->new();

            $smf->fmriOnline("$FMRI:$kvmName", { zonename => $config->{zone} ? $kvmName : undef,
                zonepath => $config->{zone}->{zonepath} }) or die "ERROR: KVM instance '$kvmName' not online\n";

            !$config->{vnc} || $config->{vnc} !~ /^sock(?:et)?$/i
                and die "ERROR: VNC not defined as socket for KVM instance '$kvmName'\n";

            $mon->soCat("$RUN_PATH/$kvmName/$kvmName.vnc", $vncPort);

            last;
        };
        /^man$/ && do {
            pod2usage(-exitstatus => 0, -verbose => 2);

            last;
        };
        /^help$/ && do {
            pod2usage(-exitval => 'NOEXIT');

            last;
        };
        #main argument invalid
        pod2usage(1);
    }
    return 1;
}

main(shift);

1;

__END__

=head1 NAME

kvmadm - Manage KVMs under SMF control

=head1 SYNOPSIS

B<kvmadm> I<command> [I<options...>]

where 'command' is one of the following:

    create <kvm_name>

    import <filename>

    delete [--purge=vnic,zvol,zone] <kvm_name>

    edit <kvm_name>

    list [kvm_name]

    state [kvm_name]

    start <kvm_name>

    stop <kvm_name>

    restart <kvm_name>

    show-cmd <kvm_name>

    info [type,...] <kvm_name>

    monitor <kvm_name> [command]

    vnc <[bind_addr:]port> <kvm_name> 

    help

    man

=head1 DESCRIPTION

Use kvmadm to create/edit your KVMs under SMF control

=head2 B<create>

creates a KVM instance with the name B<kvm_name>. Create will open an editor
where the properties can be set. zvols and/or vnics which do not
exist will be created.

for the KVM instance the following properties can be set:

 optional
     vnc
     vnc_pw_file
     vcpus
     ram
     time_base
     boot_order
     hpet
     usb_tablet
     kb_layout
     uuid
     shutdown
     cleanup
     qemu_extra_opts
     pre_start_cmd

for each disk the following properties can be set:

 mandatory
     model
     disk_path
     index 

 optional
     boot
     media
     disk_size
     block_size
     cache

for each vnic the following properties can be set:

 mandatory
    model
    nic_name
    index

 optional
    over
    vlan_id
    mtu
    txtimer
    txburst

for each serial the following properties can be set:

 mandatory
    serial_name
    index

kvmadm supports zones. zone properties are according to I<zonecfg>.
global properties can be set as "property" : "value" pair, single
resources as "resource" : { } hash structure and multiple resources
as "resource" : [ { }, ... ] array of hash structures. B<vnics> and
B<zvols> must not be added to the zone configuration as kvmadm will
add them automatically when setting up the zone.

=head2 B<import>

imports a KVM configuration from a file.

=head2 B<delete>

deletes the KVM instance with the name B<kvm_name>. Note: zvols, vnics
and zones will B<not> be deleted by default. use the B<--purge> option.

=head2 B<edit>

modify the configuration of a KVM instance. See the descriptions in the B<create>
function for details.

=head2 B<list>

lists the available KVM instances with their properties. Lists details for B<kvm_name>
is given.

=head2 B<state>

prints the state of the KVM instance(s)

=head2 B<start>

starts the KVM instance B<kvm_name>

=head2 B<stop>

stops the KVM instance B<kvm_name>

=head2 B<restart>

restarts the KVM instance B<kvm_name>

=head2 B<show-cmd>

prints the KVM invocation command for debug purpose

=head2 B<info>

queries information about the running KVM instance from qemu monitor.

type can be one of the following:

     all
     block
     blockstats
     chardev
     cpus
     kvm
     network
     pci
     registers
     qtree
     usb
     version
     vnc

=head2 B<monitor>

connects to the qemu monitor of the running KVM instance. Sends B<command>
to the qemu monitor if provided.

=head2 B<vnc>

forwards the vnc socket to IP

=head1 EXAMPLES

create a KVM instance with the name 'test-kvm'

    kvmadm create test-kvm

check the KVM instance properties

    kvmadm list test-kvm

list the available KVM instances

    svcs system/kvm

copy a KVM instance

    kvmadm list test-kvm > test-kvm.json

    kvmadm import test-kvm.json

wait 5 minutes before starting the qemu process

    "pre_start_cmd" : "/usr/bin/sleep 300"

basic zone setup

    "zone" : {
        "zonepath" : "/zones/test-kvm",
        "brand"    : "lipkg",
        "ip-type"  : "exclusive"
    }

adding readonly zone access to a vnc password file

    "zone" : {
        ...
        "fs" : [
            {
                "dir"     : "/etc/opt/kvmadm/myvncpw",
                "special" : "/etc/opt/kvmadm/myvncpw,
                "type"    : "lofs",
                "options" : "[ro,nodevices]"
            }
        ]
    }

query the attached block devices of a KVM instance with the name 'test-kvm'

    kvmadm info block test-kvm

connect to the qemu monitor of the KVM instance with the name 'test-kvm'

    kvmadm monitor test-kvm

set boot drive to d

    kvmadm monitor test-kvm boot_set d

forward the vnc socket of the KVM instance with the name 'test-kvm' to the TCP port 5900 

    kvmadm vnc 5900 test-kvm

=head1 COPYRIGHT

Copyright (c) 2017 by OETIKER+PARTNER AG. All rights reserved.

=head1 LICENSE

This program is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option)
any later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see L<http://www.gnu.org/licenses/>.

=head1 AUTHOR

S<Tobias Oetiker E<lt>tobi@oetiker.chE<gt>>
S<Dominik Hassler E<lt>hadfl@cpan.orgE<gt>>

=head1 ACKNOWLEDGMENT

While the clever configuration options and other cool ideas have been shamelessly
stolen from Joyent's vmadm, the bugs and misfeatures are all exclusive to kvmadm.

=head1 HISTORY

2015-04-28 had Zone support
2014-10-03 had Initial Version

=cut
